@startmindmap

* Linux

** Introduction

** Basics

*** Shell Features

**** Choosing your shell. \n Default shell is shown in $ grep <username> /etc/passwd \
\n Type shell name to entry other shell: ksh, tcsh, csh, sh, dash...\
\n Type $ exit to return to bash shell.
**** Running commands \n $ date, $ pwd, $ hostname, $ ls, $ id, $ whoami
**** Recalling command using command history
**** Connecting and expanding commands
**** Using shell variables
**** Creating your shell environment
**** Getting information about commands

*** Moving Around the Filesystem

**** Move Around: \n $ ls, $ ls <dir> \n $ cd <dir_path>, cd -, cd ~ \n $ pwd # print current working directory
**** File-matching metacharaters:\n *, ?, [] \n $ ls g*t, $ ls test?.txt, $ ls [a-g]*
**** File-redirection:\n `<`: directs file content to the command. $ less < bigfile \n `>`: directs standard output to a file. $ ls > test.txt.\n `2>`: directs standard error to file. \n `&>`: directs both standard output and error. \n `>>`: directs output append to a file.
**** Brace expansion characters: {} \n $ touch test{1,2,3,4,5}
**** File permissions and Ownership: \
\n 1) chmod numbers, r=4, w=2, x=1 \n $ chmod 755 <filename>, \n $ chmod -R 755 <dir_path> # set entire directory permission \
\n 2) chmod letters, user(u), group(g), other(0), all users(a), read(r), write(w), execute(x) \n $ chmod u+rw <filename> \
\n 3) Setting default file permission with umask: \n Show umask value: $ umask \n ignore first number, if value is 002, your permission is 775 \n To temporarily change your umask value: $ umask <umask_value>, $ umask 002 \n To permanently change umask value, add a umask command to the .bashrc fi le in your home directory. \
\n 4) Changing file ownership: \n $ chown <username> <filename>, $ chown <username>:<group_name> <filename> \n $ chown -R <filename>
**** Create, rename, remove.\n $ mkdir <dir_name>, $ touch <file_name> \n $ mv <filepath> <new_filepath> \n $ remove <filename> $ remove -rf <dir_path>
**** Move, Copy. \n $ move <filepath> <target_path> \n $ copy <filepath> <target_path>

*** Working with Text Files

**** Edit text. $ vim <filename>, $ vi, $ nano.
**** searching for files with locate:\n $ updatedb, $ locate <file_name>
**** searching for files with find:\n $ find <dir_path> -type <file_type> -name <filename> -size <file_size>
**** Searching in files with grep:\n $ grep <search_word> <filepath> \n Searching from output of a command \n $ ip addr show | grep inet

*** Managing Processes

**** Display processes:\n commands: ps(process status), top \n $ ps -ef, $ ps aux
**** View processes' listen port:\n $ lsof -i -P -n | grep <PID>, $ lsof -i:<port>,\n $ netstat -tulpn
**** Kill processes:\n $ kill <PID> # default signal SIGTERM(15) to terminate cleanly.\n $ kill -9 <PID> # signal SIGKILL(9) to kill immediately.\n $ killall <process_name>
**** Set process priority(NICE):\n View NICE by $ top.\n Set priority by $ renice <nice_value> -p <PID>
**** Running in foreground and background: $ fg, $ bg

** Programming with Shell Scripts

*** Shell Scripts

**** `#!/bin/bash`

*** Whitespace and Linebreaks
*** Variable
*** Input and Output
*** Control Flow

** Linux System Administrator

*** Administration and Configuration
*** Managing Software
*** Managing User Accounts

**** User Accounts

***** $ useradd <username>, $ passwd <username> \n \
 $ useradd -g <group_name> <username>, $ useradd -G <group1> <group2> ... <username>
***** /etc/passwd sara:x:1002:1007:Sara Green:/home/sara:/bin/tcsh \n <username>:<password>:<userId>:<groupId>:<userInfo>:<homeDirectory>:<shellType>
***** $ usermod <option> <value> <username>
***** $ userdel <username>, $ userdel -r <username>

**** User Group

***** /etc/group sales:x:1302:joe,bill,sally,sara \n \
<group_name>:x:<group_id>:<group_users>
***** $ groupadd <group_name>, $ groupadd -g <group_id> <group_name>
***** $ groupmod <option> <value> <group_name>, $ groupmod -n jacks jokers

*** Managing Disks and Filesystems

** Linux Server Administrator

*** Networking
*** Services

**** Using initialization systems (init) to manage each daemon process as a service
**** init systems abilities: identify runlevels, establish dependencies, set default runlevel, manage service(start, stop, pause, restart, reload)
**** systemd: the latest versions of Fedora and RHEL use the systemd init system. \n \
service unit types: service, target, ... \n \
System unit configuration files directories: /lib/systemd/system, /etc/systemd/system \n \
List service: $ systemctl list-units | grep .service, $ systemctl list-unit-files --type=service
**** Unit cofiguration file: Description=xxx, After=xxx, ExecStart=xxx, WantedBy=xxx
**** $ systemctl list-unit-files --type=service | grep -v disabled, $ systemctl status <service_name> \n \
$ systemctl <start/stop/restart/reload> <service_name> \n \
$ systemctl <enable/disable> <service_name>

*** Configuring Servers (Web, FTP, NFS etc.)
*** Troubleshooting Linux

** Linux Security

*** Securing Linux on a network

**** Auditing Network Services
**** Working with firewalls

***** On Linux system, the firewall is a host-based, network-layer, software firewall managed by the iptables utility.
***** $ ufw allow 80/tcp, $ ufw allow from 64.63.62.61 \n \
$ ufw deny 3306, $ ufw deny from 23.24.25.0/24

'''''''''''''''''''''''''''''''''''''''''''
' References:
' Linux Bible
' The Linux Command Line
' Linux Pocket Guide
'
'''''''''''''''''''''''''''''''''''''''''''

@endmindmap